//this was used to create synthetic noises, the wave shape were altered between phasor, saw, sine, square, triangle and quarterpulse in order to create alternative types of sound

// import everything necessary to make sound.

import ddf.minim.*;
import ddf.minim.ugens.*;
AudioRecorder recorder;


// create all of the variables that will need to be accessed in
// more than one methods (setup(), draw(), stop()).
Minim minim;
AudioOutput out;

// the Oscil we use for modulating frequency.
Oscil fm;

// setup is run once at the beginning
void setup()
{
  // initialize the drawing window
  size( 700, 700, P3D );

  // initialize the minim and out objects
  minim = new Minim( this );
  out   = minim.getLineOut();


  // make the Oscil we will hear.
  // arguments are frequency, amplitude, and waveform
  Oscil wave = new Oscil( 50, 1.5, Waves.PHASOR);
  // make the Oscil we will use to modulate the frequency of wave.
  // the frequency of this Oscil will determine how quickly the
  // frequency of wave changes and the amplitude determines how much.
  // since we are using the output of fm directly to set the frequency 
  // of wave, you can think of the amplitude as being expressed in Hz.
  fm   = new Oscil( 10, 0.5, Waves.SINE);
  // set the offset of fm so that it generates values centered around 200 Hz
  fm.offset.setLastValue(100);
  // patch it to the frequency of wave so it controls it
  fm.patch( wave.frequency );
  // and patch wave to the output
  wave.patch( out );

  recorder = minim.createRecorder(out, "myrecording.wav");
}

// draw is run many times
void draw()
{
  // erase the window to black
  background( 0 );
  // draw using a white stroke
  stroke( 255 );
  // draw the waveforms
  for ( int i = 0; i < out.bufferSize () - 1; i++ )
  {
    text( "Modulation frequency: " + fm.frequency.getLastValue(), 5, 15 );
    text( "Modulation amplitude: " + fm.amplitude.getLastValue(), 5, 30 );
  }
}

  // we can change the parameters of the frequency modulation Oscil
  // in real-time using the mouse.
  void mouseMoved()
  {
    float modulateAmount = map( mouseY, 0, height, 220, 1 );
    float modulateFrequency = map( mouseX, 0, width, 0.1, 100 );

    fm.setFrequency( modulateFrequency );
    fm.setAmplitude( modulateAmount );
  }


  void keyReleased()
  {
    if ( key == 'r' ) 
    {
      // to indicate that you want to start or stop capturing audio data, 
      // the audio data will be appended to the end of to the end of the file. 
      if ( recorder.isRecording() ) 
      {
        recorder.endRecord();
      } else 
      {
        recorder.beginRecord();
      }
    }
  }
